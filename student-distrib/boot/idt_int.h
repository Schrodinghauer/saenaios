/**
 *	@file boot/idt_int.h
 *
 *	Interrupt handlers
 *
 *	This file defines the interrupt handlers and related functions to handle
 *	interrupts from the processor. These functions are used in the IDT.
 *
 *	Due to the nature of interrupt handler, each handler is defined as two
 *	labels: an entry point and an actual handler. The entry point is implemented
 *	in idt_asm.S file, which primarily handles extraction of error information
 *	and `iret`. The handler will be called by the entry point.
 */

#ifndef BOOT_IDT_INT_H
#define BOOT_IDT_INT_H

#include "idt.h"

/**
 *	Structure of saved registers.
 *
 *	This structure is generated by a interrupt TSS switch followed by a `pusha`.
 *	It is used by the scheduler to switch between processes and resume user code
 *	execution
 */
typedef struct s_regs {
	uint32_t magic;		///< Should be 1145141919
	uint32_t edi;		///< edi saved by pusha
	uint32_t esi;		///< esi saved by pusha
	uint32_t ebp;		///< ebp saved by pusha
	uint32_t esp_k;		///< esp saved by pusha (Not used. See `esp`)
	uint32_t ebx;		///< ebx saved by pusha
	uint32_t edx;		///< edx saved by pusha
	uint32_t ecx;		///< ecx saved by pusha
	uint32_t eax;		///< eax saved by pusha
	uint32_t eip;		///< eip in iret structure
	uint32_t cs;		///< cs in iret structure
	uint32_t eflags;	///< eflags in iret structure
	uint32_t esp;		///< esp in iret structure
	uint32_t ss;		///< ss in iret structure
} __attribute__((__packed__)) regs_t;

/**
 *	Points to the regs_t structure in the current kernel stack. Set by ISR
 *	entry point.
 *	@see boot/idt_asm.S
 */
extern regs_t *iret_struct;

/**
 *	Divide Error entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_de();

/**
 *	NMI entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_nmi();

/**
 *	Breakpoint entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_bp();

/**
 *	Overflow entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_of();

/**
 *	Bound Range Exceeded entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_br();

/**
 *	Undefined Opcode entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_ud();

/**
 *	No Math Coprocessor entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_nm();

/**
 *	Double Fault entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_df();

/**
 *	Invalid TSS entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_ts();

/**
 *	Segment Not Present entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_np();

/**
 *	Stack-Segment Fault entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_ss();

/**
 *	General Protection Fault entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_gp();

/**
 *	Page Fault entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_pf();

/**
 *	Math Fault entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_mf();

/**
 *	Alignment Check entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_ac();

/**
 *	Machine Check entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_mc();

/**
 *	SIMD Floating Point Exception entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_xf();

/**
 *	System call entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_usr();

/**
 *	Reserved Interrupt entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_reserved();

/**
 *	Breakpoint handler
 *
 *	Currently does nothing
 */
void idt_int_bp_handler();

/**
 *	Overflow handler
 *
 *	Currently does nothing
 */
void idt_int_of_handler();

/**
 *	Prints panic message and halts the processor.
 *
 *	@param msg: The panic message. Could be a formatted string with up to four
 *				parameters
 *	@param a,b,c,d: optional payload values for the formats in `msg`
 */
void idt_int_panic(char *msg, int a, int b, int c, int d);

/**
 *	RTC interrupt entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_rtc();

/**
 *	Keyboard interrupt entry point
 *
 *	@note This is an entry label that handles interrupt handler setup and
 *		  teardown.
 */
void idt_int_keyboard();

/**
 *	PIC IRQ 0 interrupt entry point
 */
void idt_int_irq0();

/**
 *	PIC IRQ 1 interrupt entry point
 */
void idt_int_irq1();

/**
 *	PIC IRQ 2 interrupt entry point
 */
void idt_int_irq2();

/**
 *	PIC IRQ 3 interrupt entry point
 */
void idt_int_irq3();

/**
 *	PIC IRQ 4 interrupt entry point
 */
void idt_int_irq4();

/**
 *	PIC IRQ 5 interrupt entry point
 */
void idt_int_irq5();

/**
 *	PIC IRQ 6 interrupt entry point
 */
void idt_int_irq6();

/**
 *	PIC IRQ 7 interrupt entry point
 */
void idt_int_irq7();

/**
 *	PIC IRQ 8 interrupt entry point
 */
void idt_int_irq8();

/**
 *	PIC IRQ 9 interrupt entry point
 */
void idt_int_irq9();

/**
 *	PIC IRQ 10 interrupt entry point
 */
void idt_int_irq10();

/**
 *	PIC IRQ 11 interrupt entry point
 */
void idt_int_irq11();

/**
 *	PIC IRQ 12 interrupt entry point
 */
void idt_int_irq12();

/**
 *	PIC IRQ 13 interrupt entry point
 */
void idt_int_irq13();

/**
 *	PIC IRQ 14 interrupt entry point
 */
void idt_int_irq14();

/**
 *	PIC IRQ 15 interrupt entry point
 */
void idt_int_irq15();

/**
 *	Size of each IRQ entry point code. Used for address calculation
 */
extern int idt_int_irq_size;

/**
 *	PIC IRQ handlers
 *
 *	@note This symbol is defined in idt_asm.S and contains 16 entries initially
 *		  set to `idt_int_irq_default`
 */
extern irq_listener idt_int_irq_listeners[16];

/**
 *	Default handler for unhandled IRQ
 *
 *	@param irq: The IRQ number
 */
void idt_int_irq_default(int irq);

#endif
